/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_ECAL_PB_SERVICE_PB_H_INCLUDED
#define PB_ECAL_PB_SERVICE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _eCAL_pb_ServiceHeader_eCallState {
    eCAL_pb_ServiceHeader_eCallState_none = 0,
    eCAL_pb_ServiceHeader_eCallState_executed = 1,
    eCAL_pb_ServiceHeader_eCallState_failed = 2
} eCAL_pb_ServiceHeader_eCallState;

/* Struct definitions */
typedef struct _eCAL_pb_ServiceHeader {
    pb_callback_t hname; /* host name */
    pb_callback_t sname; /* service name */
    pb_callback_t mname; /* method name */
    pb_callback_t error; /* error message */
    int32_t id; /* session id */
    eCAL_pb_ServiceHeader_eCallState state; /* method call state */
    pb_callback_t sid; /* service id */
} eCAL_pb_ServiceHeader;

typedef struct _eCAL_pb_Request {
    bool has_header;
    eCAL_pb_ServiceHeader header; /* common service header */
    pb_callback_t request; /* request payload */
} eCAL_pb_Request;

typedef struct _eCAL_pb_Response {
    bool has_header;
    eCAL_pb_ServiceHeader header; /* common service header */
    pb_callback_t response; /* response payload */
    int64_t ret_state; /* callback return state */
} eCAL_pb_Response;

typedef struct _eCAL_pb_Method {
    pb_callback_t mname; /* method name */
    pb_callback_t req_type; /* request type */
    pb_callback_t resp_type; /* response type */
    int64_t call_count; /* call counter */
    pb_callback_t req_desc; /* request descriptor */
    pb_callback_t resp_desc; /* response descriptor */
} eCAL_pb_Method;

typedef struct _eCAL_pb_Service {
    int32_t rclock; /* registration clock */
    pb_callback_t hname; /* host name */
    pb_callback_t pname; /* process name */
    pb_callback_t uname; /* unit name */
    int32_t pid; /* process id */
    pb_callback_t sname; /* service name */
    uint32_t tcp_port_v0; /* the tcp port used for that service */
    pb_callback_t methods; /* list of methods */
    pb_callback_t sid; /* service id */
    /* transport specific parameter (for internal use) */
    uint32_t version; /* service protocol version */
    uint32_t tcp_port_v1; /* the tcp port used for that service */
} eCAL_pb_Service;

typedef struct _eCAL_pb_Client {
    int32_t rclock; /* registration clock */
    pb_callback_t hname; /* host name */
    pb_callback_t pname; /* process name */
    pb_callback_t uname; /* unit name */
    int32_t pid; /* process id */
    pb_callback_t sname; /* service name */
    pb_callback_t sid; /* service id */
    /* transport specific parameter (for internal use) */
    uint32_t version; /* client protocol version */
} eCAL_pb_Client;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _eCAL_pb_ServiceHeader_eCallState_MIN eCAL_pb_ServiceHeader_eCallState_none
#define _eCAL_pb_ServiceHeader_eCallState_MAX eCAL_pb_ServiceHeader_eCallState_failed
#define _eCAL_pb_ServiceHeader_eCallState_ARRAYSIZE ((eCAL_pb_ServiceHeader_eCallState)(eCAL_pb_ServiceHeader_eCallState_failed+1))

#define eCAL_pb_ServiceHeader_state_ENUMTYPE eCAL_pb_ServiceHeader_eCallState







/* Initializer values for message structs */
#define eCAL_pb_ServiceHeader_init_default       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, _eCAL_pb_ServiceHeader_eCallState_MIN, {{NULL}, NULL}}
#define eCAL_pb_Request_init_default             {false, eCAL_pb_ServiceHeader_init_default, {{NULL}, NULL}}
#define eCAL_pb_Response_init_default            {false, eCAL_pb_ServiceHeader_init_default, {{NULL}, NULL}, 0}
#define eCAL_pb_Method_init_default              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define eCAL_pb_Service_init_default             {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0}
#define eCAL_pb_Client_init_default              {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define eCAL_pb_ServiceHeader_init_zero          {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, _eCAL_pb_ServiceHeader_eCallState_MIN, {{NULL}, NULL}}
#define eCAL_pb_Request_init_zero                {false, eCAL_pb_ServiceHeader_init_zero, {{NULL}, NULL}}
#define eCAL_pb_Response_init_zero               {false, eCAL_pb_ServiceHeader_init_zero, {{NULL}, NULL}, 0}
#define eCAL_pb_Method_init_zero                 {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define eCAL_pb_Service_init_zero                {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0}
#define eCAL_pb_Client_init_zero                 {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define eCAL_pb_ServiceHeader_hname_tag          1
#define eCAL_pb_ServiceHeader_sname_tag          2
#define eCAL_pb_ServiceHeader_mname_tag          3
#define eCAL_pb_ServiceHeader_error_tag          4
#define eCAL_pb_ServiceHeader_id_tag             5
#define eCAL_pb_ServiceHeader_state_tag          6
#define eCAL_pb_ServiceHeader_sid_tag            7
#define eCAL_pb_Request_header_tag               1
#define eCAL_pb_Request_request_tag              2
#define eCAL_pb_Response_header_tag              1
#define eCAL_pb_Response_response_tag            2
#define eCAL_pb_Response_ret_state_tag           3
#define eCAL_pb_Method_mname_tag                 1
#define eCAL_pb_Method_req_type_tag              2
#define eCAL_pb_Method_resp_type_tag             3
#define eCAL_pb_Method_call_count_tag            4
#define eCAL_pb_Method_req_desc_tag              5
#define eCAL_pb_Method_resp_desc_tag             6
#define eCAL_pb_Service_rclock_tag               1
#define eCAL_pb_Service_hname_tag                2
#define eCAL_pb_Service_pname_tag                3
#define eCAL_pb_Service_uname_tag                4
#define eCAL_pb_Service_pid_tag                  5
#define eCAL_pb_Service_sname_tag                6
#define eCAL_pb_Service_tcp_port_v0_tag          7
#define eCAL_pb_Service_methods_tag              8
#define eCAL_pb_Service_sid_tag                  9
#define eCAL_pb_Service_version_tag              10
#define eCAL_pb_Service_tcp_port_v1_tag          11
#define eCAL_pb_Client_rclock_tag                1
#define eCAL_pb_Client_hname_tag                 2
#define eCAL_pb_Client_pname_tag                 3
#define eCAL_pb_Client_uname_tag                 4
#define eCAL_pb_Client_pid_tag                   5
#define eCAL_pb_Client_sname_tag                 6
#define eCAL_pb_Client_sid_tag                   7
#define eCAL_pb_Client_version_tag               8

/* Struct field encoding specification for nanopb */
#define eCAL_pb_ServiceHeader_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   hname,             1) \
X(a, CALLBACK, SINGULAR, STRING,   sname,             2) \
X(a, CALLBACK, SINGULAR, STRING,   mname,             3) \
X(a, CALLBACK, SINGULAR, STRING,   error,             4) \
X(a, STATIC,   SINGULAR, INT32,    id,                5) \
X(a, STATIC,   SINGULAR, UENUM,    state,             6) \
X(a, CALLBACK, SINGULAR, STRING,   sid,               7)
#define eCAL_pb_ServiceHeader_CALLBACK pb_default_field_callback
#define eCAL_pb_ServiceHeader_DEFAULT NULL

#define eCAL_pb_Request_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header,            1) \
X(a, CALLBACK, SINGULAR, BYTES,    request,           2)
#define eCAL_pb_Request_CALLBACK pb_default_field_callback
#define eCAL_pb_Request_DEFAULT NULL
#define eCAL_pb_Request_header_MSGTYPE eCAL_pb_ServiceHeader

#define eCAL_pb_Response_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header,            1) \
X(a, CALLBACK, SINGULAR, BYTES,    response,          2) \
X(a, STATIC,   SINGULAR, INT64,    ret_state,         3)
#define eCAL_pb_Response_CALLBACK pb_default_field_callback
#define eCAL_pb_Response_DEFAULT NULL
#define eCAL_pb_Response_header_MSGTYPE eCAL_pb_ServiceHeader

#define eCAL_pb_Method_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   mname,             1) \
X(a, CALLBACK, SINGULAR, STRING,   req_type,          2) \
X(a, CALLBACK, SINGULAR, STRING,   resp_type,         3) \
X(a, STATIC,   SINGULAR, INT64,    call_count,        4) \
X(a, CALLBACK, SINGULAR, BYTES,    req_desc,          5) \
X(a, CALLBACK, SINGULAR, BYTES,    resp_desc,         6)
#define eCAL_pb_Method_CALLBACK pb_default_field_callback
#define eCAL_pb_Method_DEFAULT NULL

#define eCAL_pb_Service_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    rclock,            1) \
X(a, CALLBACK, SINGULAR, STRING,   hname,             2) \
X(a, CALLBACK, SINGULAR, STRING,   pname,             3) \
X(a, CALLBACK, SINGULAR, STRING,   uname,             4) \
X(a, STATIC,   SINGULAR, INT32,    pid,               5) \
X(a, CALLBACK, SINGULAR, STRING,   sname,             6) \
X(a, STATIC,   SINGULAR, UINT32,   tcp_port_v0,       7) \
X(a, CALLBACK, REPEATED, MESSAGE,  methods,           8) \
X(a, CALLBACK, SINGULAR, STRING,   sid,               9) \
X(a, STATIC,   SINGULAR, UINT32,   version,          10) \
X(a, STATIC,   SINGULAR, UINT32,   tcp_port_v1,      11)
#define eCAL_pb_Service_CALLBACK pb_default_field_callback
#define eCAL_pb_Service_DEFAULT NULL
#define eCAL_pb_Service_methods_MSGTYPE eCAL_pb_Method

#define eCAL_pb_Client_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    rclock,            1) \
X(a, CALLBACK, SINGULAR, STRING,   hname,             2) \
X(a, CALLBACK, SINGULAR, STRING,   pname,             3) \
X(a, CALLBACK, SINGULAR, STRING,   uname,             4) \
X(a, STATIC,   SINGULAR, INT32,    pid,               5) \
X(a, CALLBACK, SINGULAR, STRING,   sname,             6) \
X(a, CALLBACK, SINGULAR, STRING,   sid,               7) \
X(a, STATIC,   SINGULAR, UINT32,   version,           8)
#define eCAL_pb_Client_CALLBACK pb_default_field_callback
#define eCAL_pb_Client_DEFAULT NULL

extern const pb_msgdesc_t eCAL_pb_ServiceHeader_msg;
extern const pb_msgdesc_t eCAL_pb_Request_msg;
extern const pb_msgdesc_t eCAL_pb_Response_msg;
extern const pb_msgdesc_t eCAL_pb_Method_msg;
extern const pb_msgdesc_t eCAL_pb_Service_msg;
extern const pb_msgdesc_t eCAL_pb_Client_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define eCAL_pb_ServiceHeader_fields &eCAL_pb_ServiceHeader_msg
#define eCAL_pb_Request_fields &eCAL_pb_Request_msg
#define eCAL_pb_Response_fields &eCAL_pb_Response_msg
#define eCAL_pb_Method_fields &eCAL_pb_Method_msg
#define eCAL_pb_Service_fields &eCAL_pb_Service_msg
#define eCAL_pb_Client_fields &eCAL_pb_Client_msg

/* Maximum encoded size of messages (where known) */
/* eCAL_pb_ServiceHeader_size depends on runtime parameters */
/* eCAL_pb_Request_size depends on runtime parameters */
/* eCAL_pb_Response_size depends on runtime parameters */
/* eCAL_pb_Method_size depends on runtime parameters */
/* eCAL_pb_Service_size depends on runtime parameters */
/* eCAL_pb_Client_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
