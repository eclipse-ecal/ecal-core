name: Build Ubuntu 20.04

on:
  push:
  pull_request:
    branches:
      - master

jobs:
  build-ubuntu:
    runs-on: ubuntu-20.04

    steps:
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt-get install ninja-build libprotobuf-dev libprotoc-dev protobuf-compiler

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules:  'true'
        fetch-depth: 0

    - name: CMake
      run: |
        export CC=/usr/bin/gcc-9
        export CXX=/usr/bin/g++-9
        mkdir "${{ runner.workspace }}/_build"
        cd "${{ runner.workspace }}/_build"
        cmake $GITHUB_WORKSPACE -G "Ninja" \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DECAL_HAS_CAPNPROTO=OFF \
        -DECAL_BUILD_SAMPLES=ON \
        -DECAL_BUILD_TESTS=ON \
        -DECAL_LAYER_ICEORYX=OFF \
        -DECAL_INSTALL_SAMPLE_SOURCES=OFF \
        -DECAL_JOIN_MULTICAST_TWICE=OFF \
        -DECAL_NPCAP_SUPPORT=OFF \
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON \
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=OFF \
        -DECAL_THIRDPARTY_BUILD_GTEST=ON \
        -DECAL_THIRDPARTY_BUILD_RECYCLE=ON \
        -DECAL_THIRDPARTY_BUILD_TCP_PUBSUB=ON \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_SYSCONFDIR=/etc \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LOCALSTATEDIR=/var \
        -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu
        sudo mkdir /etc/ecal
        sudo cp "$GITHUB_WORKSPACE/ecal/core/cfg/ecal.ini" /etc/ecal
      shell: bash

    - name: Build Release
      run: cmake --build . --config Release
      working-directory: ${{ runner.workspace }}/_build

    - name: Run Release
      run: ctest -V
      working-directory: ${{ runner.workspace }}/_build

    - name: Pack
      run: cpack -G DEB
      working-directory: ${{ runner.workspace }}/_build

    - name: Upload Debian
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-debian
        path: ${{ runner.workspace }}/_build/_deploy/*.deb

    #---------------------------------------------------------------------------
    # GNU tar - Excluding Some Files
    # https://www.gnu.org/software/tar/manual/html_node/exclude.html
    # the emtpy '.git/' drectory is required, it marks the root directory
#    - name: 'Create a tarball'
#      run: |
#        cd ${{ runner.workspace }}
#        tar --exclude-vcs-ignore \
#            --exclude='bin' \
#            --exclude='doc' \
#            --exclude='_build/_CPack_Packages' \
#            --exclude='_build/_deploy' \
#            --exclude='_build/lib' \
#            --exclude='*.deb' \
#            --exclude='*.a' \
#            --exclude='*.o' \
#            --exclude='*.so' \
#            --exclude=ecal-core/.git/* \
#            -czf ecal-core.tar.gz ecal-core/ _build/
#        du -sh ecal-core.tar.gz

    # https://github.com/actions/upload-artifact
#    - name: Upload the whole directory
#      uses: actions/upload-artifact@v3
#      with:
#        name: ecal-dir
#        path: ${{ runner.workspace }}/ecal-core.tar.gz

#  call-clang-tidy:
#    if: github.event_name == 'pull_request'
#    needs: build-ubuntu
#    uses: ./.github/workflows/run-clang-tidy.yml
